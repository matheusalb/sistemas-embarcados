C51 COMPILER V9.60.0.0   MEME                                                              10/29/2021 20:05:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MEME
OBJECT MODULE PLACED IN .\Objects\meme.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE meme.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\meme
                    -.lst) TABS(2) OBJECT(.\Objects\meme.obj)

line level    source

   1          #include <REG52.H>
   2          
   3          #define FR_CLOCK 12000000
   4          #define BOUDRATE 1200
   5          #define AUX (12000000/(12*1200))
   6          #define TH1_INICIAL (-(AUX*2/32)+256) //equivalente a 204
   7          
   8          #define BUFFER_SIZE 16
   9          
  10          typedef struct{
  11            char buffer[BUFFER_SIZE];
  12            unsigned char in_index;
  13            unsigned char out_index;
  14          }circularBuffer;
  15          
  16          circularBuffer RxBuffer;
  17          circularBuffer TxBuffer;
  18          
  19          bit RecebeuString = 0;
  20          bit is_TI_busy = 0;
  21          
  22          bit new_byte_arrived = 0; //variavel auxiliar para comunica??o da interrup??o com a main()
  23          
  24          
  25          char RxBufferVazio(){
  26   1        return RxBuffer.in_index == RxBuffer.out_index;
  27   1      }
  28          
  29          char TxBufferVazio(){
  30   1        return TxBuffer.in_index == TxBuffer.out_index;
  31   1      }
  32          
  33          char ReceiveChar(){
  34   1        char atual = RxBuffer.buffer[RxBuffer.out_index];
  35   1        RxBuffer.out_index = (RxBuffer.out_index + 1) % BUFFER_SIZE;
  36   1        return atual;
  37   1      }
  38          
  39          void PushChar2RxBuffer(char c){
  40   1        RxBuffer.buffer[RxBuffer.in_index] = c;
  41   1        RxBuffer.in_index = (RxBuffer.in_index + 1) % BUFFER_SIZE;
  42   1      }
  43          
  44          void ReceiveString(char *s){
  45   1        int i = 0;
  46   1        while(!RxBufferVazio()){
  47   2            s[i] = ReceiveChar();
  48   2            i++;
  49   2        }
  50   1      }
  51          
  52          void SendChar(char c){
  53   1        TxBuffer.buffer[TxBuffer.in_index] = c;
  54   1        TxBuffer.in_index = (TxBuffer.in_index + 1) % BUFFER_SIZE;
C51 COMPILER V9.60.0.0   MEME                                                              10/29/2021 20:05:50 PAGE 2   

  55   1      }
  56          
  57          char PopCharFromTxBuffer(){
  58   1        char aux = TxBuffer.buffer[TxBuffer.out_index];
  59   1        TxBuffer.out_index = (TxBuffer.out_index + 1) % BUFFER_SIZE;
  60   1        return aux;
  61   1      }
  62          
  63          void SendString(char *s){
  64   1        int i = -1;
  65   1        do{
  66   2            SendChar(s[++i]);
  67   2        }while(s[i] != '$');
  68   1      }
  69          
  70          
  71          
  72          void inicializa_timer1(){
  73   1      
  74   1        TR1 = 0; //desligando a contagem 
  75   1      
  76   1        TMOD = (TMOD & 0x0F) | 0x20; // N?o modifico os 4 ultimos bits que equivalem ao timer0 e modifico os 4 pr
             -imeiros que configuram o timer 1 
  77   1      
  78   1        TH1 = (int) TH1_INICIAL; // inicializando o TH1, ele vai inicializar o TL0 toda vez que der overflow
  79   1      
  80   1        TR1 = 1; //religando a contagem
  81   1      
  82   1      }
  83          
  84          void serial_int() interrupt 4
  85          {
  86   1        if(TI){
  87   2          is_TI_busy = 0;
  88   2          TI=0; //preciso zerar o TI pois isso n?o seria feito automaticamente, isso ? necessario para evitar que 
             -a interrup??o seja chamada indevidamente
  89   2        }
  90   1        if(RI){
  91   2          new_byte_arrived = 1; 
  92   2          RI = 0; //preciso zerar o RI pois isso n?o seria feito automaticamente, isso ? necessario para evitar qu
             -e a interrup??o seja chamada indevidamente
  93   2        }
  94   1      }
  95          
  96          void inicializa_serial(){
  97   1        SCON = (SCON & 0x0F)| 0x50; //setando o SM0|SM1|SM2|REN para 0101, para a serial operar no modo 1.
  98   1        PCON |= 0x80; //setando o smod para 1 para conseguir um boudrate mais proximo de 1200bps
  99   1      }
 100          
 101          void inicializa_Rx_Tx(){
 102   1        RxBuffer.in_index = 0;
 103   1        RxBuffer.out_index = 0;
 104   1        TxBuffer.in_index = 0;
 105   1        TxBuffer.out_index = 0;
 106   1      }
 107          
 108          void main(void){
 109   1        
 110   1      
 111   1        inicializa_Rx_Tx();
 112   1        inicializa_timer1(); //configurando o timer1 para o modo 2
 113   1        inicializa_serial(); //configurando o serial para o modo 1
C51 COMPILER V9.60.0.0   MEME                                                              10/29/2021 20:05:50 PAGE 3   

 114   1      
 115   1        EA = 1; // Habilita o tratamento de interrup??es
 116   1        ES = 1; // Habilita o tratamento da interrup??o do serial quando TI e/ou RI ? 1 
 117   1        while(1){
 118   2          if(new_byte_arrived){
 119   3            PushChar2RxBuffer(SBUF);
 120   3            if(SBUF == '$'){
 121   4              RecebeuString = 1;
 122   4            }
 123   3            new_byte_arrived = 0;
 124   3          }
 125   2          if(RecebeuString){
 126   3            char aux[BUFFER_SIZE];
 127   3            ReceiveString(aux);
 128   3            SendString(aux);
 129   3            TI = 1;
 130   3            RecebeuString = 0;
 131   3          }
 132   2          if(!is_TI_busy){
 133   3            if(!TxBufferVazio()){
 134   4              SBUF = PopCharFromTxBuffer();
 135   4            }
 136   3            is_TI_busy = 1;
 137   3          }
 138   2          
 139   2          
 140   2        }
 141   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    297    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
